#!/bin/bash
###################################################################
# NAME: tvpn
# DOWNLOAD: 		https://github.com/hoppyhedgehog/tvpn
# INSTALL LOCATION: 	/usr/local/bin
# AUTHOR: 		ben@datastorageguy.com
###################################################################
VERSION=5.0
###################################################################
# Add Line Numbers during 'set -x' debug
###################################################################
PS4='${LINENO}: '
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
# MAIN VARIABLES
###################################################################
###################################################################
###################################################################
###################################################################
SCRIPT=$(basename ${BASH_SOURCE[0]})
LD=$(date '+%Y%m')
LOGDATE=$(date '+%Y%m%d.%H%M%S')
LOGDATE_TEMP=$(date '+%Y%m%d.%H%M%S.%N')
DATETIME=$(date '+%Y%m%dT%H%M%S')
LOGDIR="$HOME/logs/tvpn"
WAITLOG="$LOGDIR/${SCRIPT}.wait"
LOGFILE="$LOGDIR/${SCRIPT}-${LD}.log"
PIDFILE=/var/run/$SCRIPT.pid
MAX_LOGSIZE=25000000 #25M
HOMEBREW_URL="https://raw.githubusercontent.com/Homebrew/install/master/install"
GITHUB=https://github.com/hoppyhedgehog/tvpn
LINE="================================================================"
###################################################################
MIN_USERNAME_LENGTH=3
MIN_PASSWORD_LENGTH=3
MIN_DOMAIN_LENGTH=2
MIN_GROUP_LENGTH=2
###################################################################
# Create Log Directory if it does not exist
###################################################################
if [ ! -d $LOGDIR ]; then
	mkdir -p $LOGDIR 2>/dev/null
fi
###################################################################
cleanfile() {
	rm -f "$1" >/dev/null 2>&1
}
###################################################################
# Determine OS type
###################################################################
unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux
	    	ETC=/etc
		SYSTEM_RESOLV=/etc/resolv.conf
		;;
    Darwin*)    machine=Mac
	    	if [ -L /etc ]; then
	    		ETC=/private/etc
		else
	    		ETC=/etc
		fi
		SYSTEM_RESOLV=/var/run/resolv.conf
		;;
    *)          machine="UNKNOWN:${unameOut}"
	    	ETC=/etc
		SYSTEM_RESOLV=/etc/resolv.conf
		;;
esac
###################################################################
CREDENTIALS=$ETC/vpnc/.credentials
###################################################################
# Verify that the local path contains the correct PATHs
###################################################################
check_path() {
	for tpath in "/bin" "/sbin" "/usr/local/bin" ; do
		if [ $(echo "$PATH"|grep -w -q "$tpath"; echo $?) != 0 ]; then
			export PATH=$tpath:$PATH
		fi
	done
}
###################################################################
# VERIFY CREDENTIALS EXIST
###################################################################
printline(){
		echo $LINE
}
###################################################################
pre_check() {

###################################################################
# Move older credentials to new name for older tvpn versions
###################################################################
if [ -f $ETC/vpnc/.tvpn-credentials ]; then
        mv -f $ETC/vpnc/.tvpn-credentials $CREDENTIALS &>/dev/null
fi
###################################################################
# Check to see if /etc/vpnc dir exists
###################################################################
if [ ! -d $ETC/vpnc ]; then
        printline
        echo "ERROR: $ETC/vpnc dir not found."
        echo "Verify you have installed vpnc-script in /etc/vpnc"
        echo "And read the README"
        echo "See $GITHUB"
        printline
        exit 1
fi
###################################################################
# CHECK FOR EXISTENCE OF CREDENTIALS FILE
###################################################################
if [ ! -f $CREDENTIALS ]; then
        echo "ERROR. $SCRIPT Credentials File: $CREDENTIALS Not Found!"
        exit 1
fi
	source $CREDENTIALS

	if [ -z "$COM_USER" ] && [ -z $reset_all ]; then
		printline
		echo "ERROR: No Username Specified for COM_USER in $SCRIPT"
		printline
		exit 1
	fi
	if [ -z "$COM_PASSWD" ] && [ -z $reset_all ]; then
		printline
		printf "ERROR: No Password Specified for COM_PASSWD in $SCRIPT"
		printline
		exit 1
	fi
	###################################################################
	check_path
	###################################################################

	if [ -z $INTERFACE ] && [ -z $reset_all ]; then
	  printline
	  echo ">NO ACTIVE ETHERNET/WIFI INTERFACE SPECIFIED"
	  echo ">THE FOLLOWING INTERFACES ARE ACTIVE."
	  printline
	  ifconfig | pcregrep -M -o '^[^\t:]+(?=:([^\n]|\n\t)*status: active)'
	  echo ">EDIT [$SCRIPT] AND SPECIFY THE CORRECT INTERFACE "
	  echo ">FOR THE 'INTERFACE' VARIABLE"
	  printline
	  exit 1
	fi
	###################################################################
	# Verify openconnect is installed
	###################################################################
	OPENC="$(which openconnect)"
	if [ ! -f $OPENC ]; then
	  echo $LINE
	  printf "ERROR: openconnect must be installed\n"
	  printf "See README @ $GITHUB"
	  printf "It is recommended you use HomeBrew\n"
	  printf "If you do not have HomeBrew do: \n"
	  printf "\$bash -c  \"\$(curl -fsSL $HOMEBREW_URL)\"\n"
	  printf "Set the environment post install, then do:\n"
	  printf "'brew install openssl openconnect' \n"
	  printf "OR\n"
	  printf "Download and Install openconnect from:\nhttps://www.infradead.org/openconnect/download.html\n$LINE\n"
	  exit 1
	fi
	OPENC="openconnect"
	COMMAND="$OPENC -vvv --dump  --authgroup $COM_AUTHGROUP --script $VPN_SCRIPT  -u $COM_USER --passwd-on-stdin --servercert pin-sha256:EK6cSsxsiVo6z7puoTQsmT7OKvcyzRB2IIjRVIGFClQ=  $COM_HOST"

}
###################################################################
# COLORS
###################################################################
RED='\033[0;31m'
NORMAL='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[0;94m'
MAGENTA='\033[0;35m'
###################################################################
VPN_SCRIPT=$ETC/vpnc/vpnc-script
export INTERNAL_IP4_DNS=
###################################################################
CUSTOM_RESOLV=$ETC/vpnc/resolv.conf.custom
SOFT_LINK_SYSTEM_RESOLV=$ETC/resolv.conf
DEFAULT_RESOLV=$ETC/vpnc/resolv.conf.default
###################################################################
if [[  ( $USER != "root" ) ]]; then
  printline
  echo "ERROR This script must be run as root."
  printline
  exit 1
fi

###################################################################
if [ ! -L $SOFT_LINK_SYSTEM_RESOLV ]; then
		rm -f $SOFT_LINK_SYSTEM_RESOLV &>/dev/null
		ln -s $SYSTEM_RESOLV $SOFT_LINK_SYSTEM_RESOLV >/dev/null
fi

if [ ! -f $DEFAULT_RESOLV ]; then
	cp -pf $SYSTEM_RESOLV $DEFAULT_RESOLV
	cat $SYSTEM_RESOLV|sed  '/^\s*$/d;/\;/d;/^\#/d' >$DEFAULT_RESOLV
	cat $SYSTEM_RESOLV|sed  '/^\s*$/d;/\;/d;/^\#/d' >>$CUSTOM_RESOLV
fi
###################################################################
check_debug() {
if [ ! -z "$debug" ]; then
                DEBUG="-vvv --dump"
else
                DEBUG="-v"
fi
}
###################################################################
###################################################################
checklog() {
  echo >$WAITLOG
  if  [ ! -f $LOGFILE ]; then
    touch $LOGFILE
  fi
 }
###################################################################
check_credentials() {
	source $CREDENTIALS
if [ -z $1 ]; then
	printline
	echo "CREDENTIALS FROM [$CREDENTIALS]"
	printline
	printf "VPN_USER\t=\t$COM_USER\n"
	printf "VPN_PASSWORD\t=\t$(decrypt_password $COM_PASSWD)\n"
	printf "VPN_DOMAIN\t=\t$COM_DOMAIN\n"
	printf "VPN_GROUP\t=\t$COM_AUTHGROUP\n"
	printf "VPN_HOST\t=\t$COM_HOST\n"
	printf "INTERFACE\t=\t$INTERFACE\n"
	printline
else
	while read line; do
		if [ $(echo "$line"|grep -q COM_PASS;echo $?) == 0 ]; then
			v="[UNENCRYPTED = $(decrypt_password $COM_PASSWD)]"
		else
			v=
		fi
			echo "$line $v"
	done< <(cat $CREDENTIALS)
	printline
	exit 0
fi
}
###################################################################
get_date() {
	REAL_DATETIME=$(date '+%Y-%m-%dT%H:%M:%S')
        dtc="${GREEN}[$REAL_DATETIME]${NORMAL} ${CYAN}$(hostname)${NORMAL}"
	dt="[$REAL_DATETIME] $(hostname)"
}
###################################################################
writelogo () {
        THINLINE="-----------------------------------------------------------"
        get_date
        local e=""
        local comment="$1"
	 (printf "$dt $comment\n" >>$LOGFILE 2>&1 )
 }
###################################################################
writelog () {
	checklog
        THINLINE="-----------------------------------------------------------"
        get_date
        local e=""
        local comment="$1"
        printf "$dtc $comment\n"
	 if [ -z "$2" ]; then
		 (printf "$dt $comment\n" >>$LOGFILE 2>&1 )
	 fi
}
###################################################################
reset_all_routing() {
    echo "Flushing routes...";
    for i in $(ifconfig | egrep -o "^[a-z].+\d{1}:" | sed 's/://');
    do
        ifconfig "$i" down;
    done;
    route -n flush;
    for i in $(ifconfig | egrep -o "^[a-z].+\d{1}:" | sed 's/://');
    do
        sudo ifconfig "$i" up;
    done
}

###################################################################
info_disable_sip() {
	printline
	cat << EOF
To verify SIP:

# csrutil status
System Integrity Protection status: enabled.


To Disable SIP on Mac:

a) Reboot the Mac and hold down Command + R keys simultaneously after you hear the startup chime, this will boot OS X into Recovery Mode

b) When the "OS X Utilities" screen appears, pull down the 'Utilities' menu at the top of the screen instead, and choose "Terminal"

c) Type the following command into the terminal then hit return:

# csrutil disable; reboot

d) You will see a message saying that System Integrity Protection has been disabled and the Mac needs to restart for changes to take effect, and the Mac will then reboot itself automatically, just let it boot up as normal
EOF
printline
}

###################################################################
clear_dns() {
	if [ $(csrutil status|grep -q disabled 2>/dev/null) != 0 ]; then
			writelog "ERROR: Unable to restart mDNSResponder because SIP is enabled"
			info_disable_sip
	else
			writelog "********** Flushing DNS Cache **********************************"
			dscacheutil -flushcache &&  killall -HUP mDNSResponder  >>$LOGFILE 2>&1
			writelog "********** Reloading mDNSResponder **********************************"
			writelog "Reloading mDNSResponder"
			launchctl unload -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
			launchctl load -w /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist
	fi
}
###################################################################
reset_routing() {
# Reset routing table on OSX
#
# display current routing table

writelog "**********************************************************"
writelog "Flushing Routing Table"
writelog "**********************************************************"
for i in {0..4}; do
  route -n flush >/dev/null 2>&1
  sleep .2
done

clear_dns

writelog "**********************************************************"
writelog "Bringing interface $INTERFACE down..."
writelog "**********************************************************"
ifconfig $INTERFACE down
sleep .5
writelog "**********************************************************"
writelog "Bringing interface $INTERFACE back up..."
writelog "**********************************************************"
ifconfig $INTERFACE  up
sleep .5

writelog "********** CURRENT ***************************************"
netstat -rn >>$LOGFILE
writelog "**********************************************************"

}
###################################################################
checklog(){
        if [ ! -f $LOGFILE ]; then
                touch $LOGFILE 2>/dev/null
        else

		if [ $(stat -c %s $LOGFILE  >/dev/null 2>&1; echo $?) != 0 ]; then
			local s=$(stat -f "%z"  $LOGFILE)
		else
			local s=$(stat -c %s $LOGFILE)
		fi

		if [ $s -gt $MAX_LOGSIZE ]; then
			printf ""> $LOGFILE  2>/dev/null 2>&1
			writelog "LOGFILE > $MAX_LOGSIZE. Recreating..." 1
		fi
	fi
}
###################################################################
usage() {
                printline
                echo ">[$SCRIPT]:  VPN Script to connect to the VPN [version $VERSION]"
                printline
                echo ">usage"
                echo "  # $SCRIPT [start|stop|status|restart|setup|-s|-d|-p|-r <arg>|-v]"
                echo "          start   Initialize connection to $COM_HOST VPN"
                echo "          stop    Close connection to $COM_HOST VPN"
                echo "          restart Restart VPN connection"
                echo "          status  View the current VPN Connection Status"
                echo "          setup   Setup and configure TVPN"
#                echo "          -c      View your current Credentials"
                echo "          -s      Tail the current $LOGFILE"
                echo "                  to verify the current Connection Status"
                echo "          -d      Enable Debug"
		echo "          -p      Print Credentials (password decrypted)"
                echo "          -r <arg>"
		echo "			all	- Reset Everything and re-run Setup"
		echo "			route 	- Reset Routing"
		echo "			int	- Reset Network Interface info"
		echo "			user	- Reset VPN User Credentials"
		echo "			pass	- Reset VPN User Password"
		echo "			dom	- Reset VPN Domain"
		echo "			group	- Reset VPN Auth Group"
		echo "			serv	- Reset VPN Server"
		echo "			vd	- Reset VPN DNS Servers"
		echo "			ld	- Reset LOCAL  DNS Servers"
                echo "          -v      Version info"
                echo $LINE
                exit
}

###################################################################
###################################################################
start_openconnect(){
cat << EOF >/tmp/tvpn.openconnect.daemon
#!/bin/bash
# DEFINE GLOBAL VARIABLES
source $CREDENTIALS
debug=$debug
CUSTOM_RESOLV=$CUSTOM_RESOLV
SYSTEM_RESOLV=$SYSTEM_RESOLV
DEFAULT_RESOLV=$DEFAULT_RESOLV
COMMAND='$COMMAND'
LOGFILE=$LOGFILE
WAITLOG=$WAITLOG
PIDFILE=$PIDFILE
WAIT_TIME=20
SLEEP_INTERVAL=5
#--------------------------------------------------
if [ ! -f $LOGFILE ];then
 touch $LOGFILE
fi
#--------------------------------------------------
EOF
cat << 'EOF' >>/tmp/tvpn.openconnect.daemon
#--------------------------------------------------
get_date() {
        REAL_DATETIME=`date '+%Y-%m-%dT%H:%M:%S'`
	dt="[$REAL_DATETIME] $(hostname)"
}
#--------------------------------------------------
decrypt_password() {
        local ENCRYPTED_PASSWORD=$1
        echo -e "$ENCRYPTED_PASSWORD"|openssl enc -aes-256-cbc -a -d -pass pass:IPAMaster 2>/dev/null
}

#--------------------------------------------------
get_date
echo -e "$dt Connecting VPN to $COM_DOMAIN" >>$LOGFILE
UNENCRYPTED_PASSWD=$(decrypt_password $COM_PASSWD)
if [ !  -z $debug ]; then
	CP=$UNENCRYPTED_PASSWD
else
	CP="<mypassword>"
fi
if [ -z "$UNENCRYPTED_PASSWD" ]; then
	echo -e "$dt ERROR: Problem decrypting Password $COM_PASSWD" |tee -a $LOGFILE
else
	echo -e "$dt # echo -e $CP|$COMMAND" |tee -a $LOGFILE
	(echo  -e "$UNENCRYPTED_PASSWD"|$COMMAND >>$LOGFILE 2>&1) &
	echo $!>$PIDFILE
fi
#--------------------------------------------------
EOF

chmod 755 /tmp/tvpn.openconnect.daemon
echo -e "$dt Starting /tmp/tvpn.openconnect.daemon" >> $LOGFILE
(cd /tmp; echo |nohup bash -c "/tmp/tvpn.openconnect.daemon" nohup.out >/dev/null 2>&1) &
}
###################################################################
# CREATING DAEMON TO WAIT AND THEN CHECK THE /etc/resolv.conf
# AND VERIFY ALL DNS SERVERS LISTED ARE PINGABLE
dns_check(){


cat << EOF >/tmp/tvpn.daemon
#!/bin/bash
# DEFINE GLOBAL VARIABLES
CUSTOM_RESOLV=$CUSTOM_RESOLV
SYSTEM_RESOLV=$SYSTEM_RESOLV
DEFAULT_RESOLV=$DEFAULT_RESOLV
LOGFILE=$LOGFILE
WAITLOG=$WAITLOG
WAIT_TIME=20
SLEEP_INTERVAL=5
DNV=$DNV
i=0
c=0
#--------------------------------------------------
if [ ! -f $LOGFILE ];then
 touch $LOGFILE
fi
#--------------------------------------------------
EOF

cat << 'EOF' >>/tmp/tvpn.daemon
#--------------------------------------------------
get_date() {
        REAL_DATETIME=`date '+%Y-%m-%dT%H:%M:%S'`
	dt="[$REAL_DATETIME] $(hostname)"
}
#--------------------------------------------------
pingtest() {
        (ping -c1 -q -W1 $1)>/dev/null 2>&1
        if [ $? == 0 ]; then
                echo 0
        else
                echo 1
        fi
}
EOF

cat << 'EOF' >>/tmp/tvpn.daemon
while [ $i != 1 ]; do
 get_date
 if [ $(tail $LOGFILE| egrep -q "^Send|^Got"; echo $? ) == 0 ]; then
	eval $DNV|tee -a $WAITLOG
        (printf "$dt DNS Check Complete. [tpvn.daemon] exiting successfully.\n" |tee -a  $LOGFILE $WAITLOG ) >/dev/null 2>&1
EOF
cat << EOF >>/tmp/tvpn.daemon
  rm -f $WAITFILE 2>/dev/null
EOF
cat << 'EOF' >>/tmp/tvpn.daemon
  (echo |nohup bash -c "sleep 1; rm -f /tmp/tvpn.daemon 2>/dev/null; rm -f nohup.out 2>/dev/null" nohup.out >/dev/null 2>&1) &
  i=1
 else
  if [ ! -f $log ] && [ $c -gt 2 ]; then
   i=1
  fi
  echo "$dt Waiting to confirm connection. Sleep #$c" >> $WAITLOG
  sleep $SLEEP_INTERVAL
  ((c++))
 fi
 if [ $c -gt $WAIT_TIME ]; then
  i=1
  (echo "$dt Exiting after [$c] tries." |tee -a $LOGFILE $WAITLOG )>/dev/null 2>&1
 fi
done
EOF

chmod 755 /tmp/tvpn.daemon
get_date
echo -e "$dt Starting /tmp/tvpn.daemon" >>$LOGFILE
(cd /tmp;echo |nohup bash -c "/tmp/tvpn.daemon" nohup.out >/dev/null 2>&1) &

}
###################################################################
start_vpn() {
	pre_check
	rm -f $WAITLOG >/dev/null 2>&1
	OPENC=$(which openconnect)
	if [ $($OPENC --version >/dev/null 2>&1; echo $?) != 0 ]; then
		writelog "ERROR: openconnect not found. Exiting ..." 1
		exit 1
	fi
	check_debug
	if [ ! -z $test ]; then
		echo "PASSWD: $COM_PASSWD |$COMMAND"
	else
		echo $LINE >> $LOGFILE
		writelog "Initiating connection to VPN to $COM_DOMAIN"
		start_openconnect
		sleep .3
		if [ -n $(cat $PIDFILE) ]; then
			writelog "Started VPN as PID:$(cat $PIDFILE)"
			dns_check
			check_start_status
			exit 0
		else
			writelog "ERROR: Problem Starting VPN. Exiting ..."
			exit 1
		fi
	fi
}
###################################################################
rmpid() {
	rm -f $PIDFILE >/dev/null 2>&1
}
###################################################################
check_running_process() {
	pgrep -x "$1"|grep -q "[0-9]" 2>/dev/null
	if [ $? == 0 ]; then
		echo 0
	else
		echo 1
	fi
}
###################################################################
check_pid() {
	if [ -f $PIDFILE ]; then
		local pid="$(cat $PIDFILE)"
		ps -p $pid >/dev/null 2>&1
		if [ $? != 0 ]; then
			rmpid
			echo 1
		else
			echo 0
		fi
	else
		local r=0
		if [ $(check_running_process openconnect) ]; then
			r=1
		fi
		if [ $(check_running_process "bash tvpn") ]; then
			r=1
		fi
		echo $r
	fi
 }
###################################################################
stop_vpn(){
	if [ $(check_pid) == 0 ]; then
		if [ -f "$PIDFILE" ]; then
			local pid=$(cat $PIDFILE)
			local oc=$(pgrep -x openconnect)
			writelog "[$SCRIPT] currently running under $pid. Stopping."
			(kill -9 $pid $oc >/dev/null 2>&1)
		fi
		if [ $(check_running_process openconnect) ]; then
			local sr=1
			writelog "[$SCRIPT] shows openconnect is still running as $(pgrep -nx openconnect). Stopping"
			killall -9 openconnect 2>/dev/null
		fi
		sleep .2
		if [ $(check_running_process $SCRIPT) ]; then
			writelog "[$SCRIPT] is still running as $(pgrep -nx $SCRIPT). Stopping."
			killall -9 $SCRIPT 2>/dev/null
		fi
		rmpid
		$DNH

	else
		writelog "[$SCRIPT] not currently running."
	fi
}
###################################################################
verify_connect_status() {
	if [ $(check_running_process openconnect) ] || [ $(tail -5 $LOGFILE |grep -q "^No work"; echo $?) == 0 ] || [ $(tail -5 $LOGFILE |grep -q "Keepalive"; echo $?) == 0 ] || [ $(tail -5 $LOGFILE |grep -q "Sent DTLS";echo $?) == 0 ]; then
		echo 0
	else
		echo 1
	fi
}

###################################################################
verify_openconnect_connected() {
 	if [ $(tail -5 $LOGFILE |grep -q "^No work"; echo $?) == 0 ] || [ $(tail -5 $LOGFILE |grep -q "Keepalive"; echo $?) == 0 ] || [ $(tail -5 $LOGFILE |grep -q "Sent DTLS";echo $?) == 0 ]; then
		echo 0
	else
		echo 1
	fi
}
###################################################################
check_start_status() {
	local i=0
	local c=1
	local SLEEP_INTERVAL=2
	local WAIT_TIME=20
	while [ $i != 1 ]; do
		get_date
		nc=0

		if [ $(check_running_process openconnect) ]; then
			printf "$dtc [$SCRIPT] is connected and running as PID $(pgrep -x openconnect)\n"
			i=1
		fi

		if [  $(verify_openconnect_connected) == 1 ] && [ $i == 0 ]; then
			printf "$dtc Waiting for [$SCRIPT] to connect. Sleeping $SLEEP_INTERVAL. Try #$c\n"
			nc=1
			sleep $SLEEP_INTERVAL
		fi
		((c++))
		if [ $c -gt $WAIT_TIME ] && [ $nc == 1 ]; then
			printf "$dtc Exiting after [$c] tries.\n"
			i=1
		fi
	done
}
###################################################################
status_vpn() {
	if [ $(check_running_process openconnect) != 0 ]; then
		writelog "[$SCRIPT] is not currently running." 1
		is_running=0
		return
	fi

	if [ $(check_running_process openconnect) == 0 ]; then
		writelog "[$SCRIPT] is currently running as PID $(pgrep -x openconnect)" 1
		is_running=1
		return
	else
		writelog "[$SCRIPT] is not currently running." 1
		is_running=0
		return
	fi

	if [ ! -z "$(pgrep $SCRIPT)" ]; then
		writelog "[$SCRIPT] is currently running as PID $(pgrep -x openconnect)" 1
		is_running=1
		return
	fi

}
###################################################################

############################################################
build_creds() {
	rm -f $CREDENTIALS &>/dev/null
	echo "########################################
# CREDENTIALS FILE FOR TVPN SCRIPT
########################################">$CREDENTIALS
}
############################################################
credline() {
echo "########################################">>$CREDENTIALS
}
############################################################
getvpn() {
        local stop=
        if [  -z $reset ]; then
                while [ -z $stop ]; do
                        get_date;printf "$dtc Enter your VPN Server FQDN or IP address> "
                        read vpn
			if [ $(echo "$vpn"|grep -q "\."; echo $?) == 0  ]; then
                                vpn_server=$(echo $vpn|tr "[:upper:]" "[:lower:]"|sed 's/^[ \t]*//;s/[ \t]*$//')
                                writelog "Writing VPN Server [$vpn_server] --> $CREDENTIALS"
				#echo "# YOUR VPN HOST NAME OR IP ADDRESS" >>$CREDENTIALS
                                echo "COM_HOST=\"$vpn_server\"">>$CREDENTIALS
                                local stop=1
                        else
                                writelog "ERROR: VPN Server appears to be invalid"
                        fi
                done
        fi
}
############################################################
############################################################
getdomain() {
        local stop=
        if [ -z $reset ]; then
                while [ -z $stop ]; do
                        get_date;printf "$dtc Enter your AD Domain > "
                        read dom
                        if [ $(echo "$dom"|wc -c ) -gt $MIN_DOMAIN_LENGTH ]; then
                                domain=$(echo $dom|tr "[:lower:]" "[:upper:]"|sed 's/^[ \t]*//;s/[ \t]*$//')
                                writelog "Writing AD Domain [$domain] --> $CREDENTIALS"
				#echo "# YOUR VPN DOMAIN" >>$CREDENTIALS
                                echo "COM_DOMAIN=\"$domain\"" >>$CREDENTIALS
                                local stop=1
                        else
                                writelog "ERROR: AD Domain is less than $MIN_DOMAIN_LENGTH characters"
                        fi
                done
        fi
}
############################################################
encrypt_password(){
	PASS=$(echo -e "$1"|openssl enc -aes-256-cbc -a -pass pass:IPAMaster 2>/dev/null)
        echo $PASS
}
############################################################
decrypt_password() {
        local ENCRYPTED_PASSWORD=$1
        echo -e "$ENCRYPTED_PASSWORD"|openssl enc -aes-256-cbc -a -d -pass pass:IPAMaster 2>/dev/null
}

############################################################
setpass() {
        local pass="$1"
        temp_pass=$(echo -e "$pass"|awk '{gsub(/[[:blank:]]/,"");print}')
        ENCRYPTED_PASSWORD=$(encrypt_password $temp_pass 2>/dev/null)
        writelogo "Writing Encrypted Password [$ENCRYPTED_PASSWORD]--> $CREDENTIALS"
	#echo "# YOUR VPN PASSWORD (ENCRYPTED)" >>$CREDENTIALS
        echo -e "COM_PASSWD='$ENCRYPTED_PASSWORD'">>$CREDENTIALS
}
############################################################
getgroup() {

        local stop=
        if  [  -z $reset ]; then
                while [ -z $stop ]; do
                        get_date
                        printf "$dtc Enter your VPN Auth Group> "
                        read group
                        if [ $(echo "$group"|wc -c ) -gt $MIN_GROUP_LENGTH ]; then
                                temp_group=$(echo $group|tr "[:lower:]" "[:upper:]"|awk '{gsub(/[[:blank:]]/,"");print}')
                                writelog "Writing VPN AuthGroup[$temp_group] --> $CREDENTIALS"
                                #echo "# YOUR VPN AUTH GROUP" >>$CREDENTIALS
                                echo -e "COM_AUTHGROUP=\"$temp_group\"" >>$CREDENTIALS
                                local stop=1
                        else
                                writelog "ERROR: VPN Auth Group is less than $MIN_GROUP_LENGTH characters"
                        fi
                done
        fi
}
############################################################
validate_ipaddress () {
        CHECKIP=0
        echo $1 |egrep '[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}' >/dev/null 2>&1
        if [ $? != 0 ]; then
                CHECKIP=1
        fi
        echo $CHECKIP
}
############################################################
build_reset_dns() {
cat<< 'EOF' > /etc/vpnc/tvpn-flush-dns
#!/bin/bash
RED='\033[0;31m'
NORMAL='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[0;94m'
HOSTNAME=$(hostname)
get_date() {
        REAL_DATETIME=`date '+%Y-%m-%dT%H:%M:%S'`
        dtc="${GREEN}[$REAL_DATETIME]${NORMAL} ${CYAN}$HOSTNAME${NORMAL}"
        dt="[$REAL_DATETIME] $HOSTNAME"
}
writelog (){
	get_date
	echo -e "$dtc $1 "
}
writelog "Resetting DNS and clearing cache"
writelog "Issuing: dscacheutil -flushcache"
dscacheutil -flushcache
sleep .3
writelog "Issuing: killall -HUP mDNSResponder"
killall -HUP mDNSResponder
sleep .4
writelog "Issuing: killall -9 mDNSResponder mDNSResponderHelper"
killall -9 mDNSResponder mDNSResponderHelper
sleep .3
writelog "Done"
EOF
chmod 755  /etc/vpnc/tvpn-flush-dns
}
############################################################
build_reset_file() {
	local FILE=/tmp/.resetfile
	cat << 'EOF' >/tmp/.resetfile
#!/bin/bash
RED='\033[0;31m'
NORMAL='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[0;94m'
HOSTNAME=$(hostname)
EOF

if [ $1 == 1 ]; then
	local n="VPN"
else
	local n="LOCAL"
fi

cat << EOF >>/tmp/.resetfile
	OS=$machine
	NAME=$n
	INT=INTERFACE
	SERVICE=NWSERVICE
	NAMESERVER=${NAME}_NAMESERVER
	SEARCH=${NAME}_SEARCH
EOF
cat << 'EOF' >>/tmp/.resetfile
get_date() {
        REAL_DATETIME=$(date '+%Y-%m-%dT%H:%M:%S')
        dtc="${GREEN}[$REAL_DATETIME]${NORMAL} ${CYAN}$HOSTNAME${NORMAL}"
        dt="[$REAL_DATETIME] $HOSTNAME"
}
writelog (){
        get_date
        echo -e "$dtc $1 "
}
servlist=""
searchlist=""
search=0
slist=0
while read line; do
        arg=$(echo "$line"|sed 's/"//g'|sed "s/'//g"|awk -F"=" '{print $2}')
        if [ $( echo "$line"|grep -q $INT;echo $?) == 0 ]; then
                iface=$arg
        elif [ $( echo "$line"|grep -q $SERVICE;echo $?) == 0 ]; then
                service=$arg
        elif [ $(echo "$line"|grep -q $NAMESERVER;echo $?) == 0 ]; then
                servlist="$servlist  $arg"
                slist=1
        elif [ $(echo "$line" |grep -q $SEARCH;echo $?) == 0 ]; then
                searchlist="$searchlist $arg"
                search=1
        fi
done< <(egrep "SERVICE|$NAME|$INT" /etc/vpnc/.credentials)

if [ -z "$iface" ]; then
	writelog "ERROR: Unable to Locate Network Service Interface"
	exit 1
fi
if [ -z "$service" ]; then
	writelog "ERROR: Unable to Locate Network Service"
	exit 1
fi

if [ $search == 1 ]; then
        writelog "Setting $NAME Search Domains for Interface [$iface] Service [$service] to [$searchlist]"
	if [ $machine == "Mac" ]; then
	        writelog "networksetup -setsearchdomains \"$service\" $searchlist"
	        networksetup -setsearchdomains "$service" $searchlist
	else
		echo "search $searchlist" >/etc/resolv.conf
	fi
fi
if [ $slist == 1 ]; then
        writelog "Setting $NAME DNS for Interface [$iface] Service [$service] to [$servlist]"
	if [ $machine == "Mac" ]; then
       		writelog "networksetup -setdnsservers \"$service\" $servlist"
       		networksetup -setdnsservers "$service" $servlist
	else
        writelog "Setting $NAME DNS for Interface [$iface] Service [$service] to [$servlist]"
		for i in $servlist; do
			echo "nameserver $i" >>/etc/resolv.conf
		done
	fi
fi
sleep 5
writelog "Sleeping 5 Seconds then flushing DNS"
/etc/vpnc/tvpn-flush-dns
EOF

if [ $1 == 1 ]; then
	mv -f $FILE $DNV &>/dev/null
	chmod 755 $DNV &>/dev/null
else
	mv -f $FILE $DNH &>/dev/null
	chmod 755 $DNH &>/dev/null
fi

}
############################################################
getdns() {
        local stop=
	local dc=1
	if [ $1 == 1 ]; then
			local VPNS="VPN_NAMESERVER"
			local VSEARCH="VPN_SEARCH"
			local CONN="VPN"
		else
			local VPNS="LOCAL_NAMESERVER"
			local VSEARCH="LOCAL_SEARCH"
			local CONN="LOCAL"
	fi
	local resetarg=$2

        if  [ $resetarg == 1 ]; then
        #       echo "# LIST OF $CONN DNS SERVERS" >>$CREDENTIALS
		writelog "$THINLINE"
		writelog "Gathering a list of $CONN DNS Servers"
		writelog "ENTER BLANK OR \".\" TO EXIT"
                while [ -z $stop ]; do
                        get_date
                        printf "$dtc Enter your $CONN DNS Server IP #$dc> "
                        read dns_ans
			dns=$(echo -e "$dns_ans"|awk '{gsub(/[[:blank:]]/,"");print}')
			if [ -z $dns ] || [ $dns == "." ]; then
				stop=1
			elif [ $(validate_ipaddress $dns) == 0 ]; then
                                temp_group=$(echo $group|tr "[:lower:]" "[:upper:]"|sed 's/^[ \t]*//;s/[ \t]*$//')
                                echo -e "${VPNS}[$dc]=\"$dns\"" >>$CREDENTIALS
				((dc++))
                        else
                                writelog "ERROR: INVALID IP ADDRESS"
                        fi
                done
		if [ $dc -gt 1 ]; then
			((dc--))
                	writelog "Writing $CONN DNS [$dc] SERVERS --> $CREDENTIALS"
		fi
        fi
	dc=1
        if  [  $resetarg == 2 ]; then
        #        echo "# LIST OF $CONN DNS DOMAIN SEARCH ORDER" >>$CREDENTIALS
		writelog "$THINLINE"
                writelog "Gathering a list of $CONN DNS Servers to search"
                writelog "ENTER BLANK OR \".\" TO EXIT"
                while [ -z $stop ]; do
                        get_date
                        printf "$dtc Enter your $CONN DNS Domain Search Server Name #$dc> "
                        read answer
                        dns=$(echo $answer|tr "[:upper:]" "[:lower:]"|sed 's/^[ \t]*//;s/[ \t]*$//')
                        if [ -z $dns ] || [ $dns == "." ]; then
                                stop=1
			elif [ $(echo -E $dns|grep -q -E "[a-z][a-z].[a-z][a-z]"; echo $?) != 0 ]; then
                                writelog "ERROR: INVALID NAME SERVER"
			else
                                echo -e "${VSEARCH}[$dc]=\"$dns\"" >>$CREDENTIALS
				((dc++))
                        fi
                done
		if [ $dc -gt 1 ]; then
			((dc--))
                	writelog "Writing $CONN DNS [$dc] DOMAIN SEARCH SERVERS --> $CREDENTIALS"
		fi
        fi


}
############################################################

getuser() {

        local stop=
        if  [  -z $reset ]; then
                while [ -z $stop ]; do
                        get_date;printf "$dtc Enter your VPN Username> "
                        read user
                        if [ $(echo "$user"|wc -c ) -gt $MIN_USERNAME_LENGTH ]; then
                                temp_user=$(echo $user|tr "[:upper:]" "[:lower:]"|sed 's/^[ \t]*//;s/[ \t]*$//')
                                writelog "Writing VPN User [$temp_user] --> $CREDENTIALS"
                        #        echo "# YOUR VPN USER ID" >>$CREDENTIALS
				echo -e "COM_USER=\"$temp_user\"" >>$CREDENTIALS
                                local stop=1
                        else
                                writelog "ERROR: VPN Username is less than $MIN_USERNAME_LENGTH characters"
                        fi
                done
        fi
}
############################################################
getpass() {
	passcheck=/tmp/.passcheck
        local stop=
        if [  -z $reset ]; then
		while [ -z $stop ]; do
			p=1
		while [ $p -le 2 ]; do
			if [ $p == 2 ]; then
				local r="Re-"
			else
				local r=
			fi
				get_date;printf "$dtc ${r}Enter your Password > "
				read -s pass
				if [ $(echo "$pass"|wc -c ) -gt $MIN_PASSWORD_LENGTH ]; then
					 if [ $(echo -e "$pass" |fgrep -q "\\"; echo $?) == 0 ]; then
							 pass=$(echo -e "$pass"|sed 's/\\/\\\\/g')
					 fi
					 if [ $(echo -e "$pass" |fgrep -q '\\\!'; echo $?) == 0 ]; then
							 pass=$(echo -e "$pass"|sed 's/\\!/!/g')
					 fi
					printf "\n"
					if [ $p == 1 ]; then
						echo -e "$pass">${passcheck}.1
					elif [ $p == 2 ]; then
						echo -e "$pass">${passcheck}.2
						        pass1=$(cat ${passcheck}.1)
							pass2=$(cat ${passcheck}.2)
							if [ "$pass1" != "$pass2" ]; then
								writelog "ERROR: Passwords do not match!"
								writelog "Try Again!"
								writelog "$THINLINE"	
								break 1		
								ex=1
							else
								setpass "$pass1"
								cleanfile ${passcheck}.1
								cleanfile ${passcheck}.2
								((p++))
								stop=1
							fi

					fi
				else
					printf "\n"
					writelog "ERROR: User Password is less than $MIN_PASSWORD_LENGTH characters"
				fi

			((p++))
			done
		done
        fi


}

############################################################
view_creds() {
        while read line; do
                if [ $(echo "$line"|grep -q COM_PASSW;echo $?) == 0 ]; then
                        tpass=$(echo "$line"|awk -F"'" '{print $2}')
			npass=$(decrypt_password $tpass)
			echo "COM_PASSWD='$npass'"
		else
			echo -e "$line"
		fi
        done< <(cat $CREDENTIALS)
}

############################################################
clear_creds(){
	local ARG=$1
	local stub=/tmp/.credstub
	cp $CREDENTIALS $stub &>/dev/null
	cat $stub |grep -v ^${ARG} >$CREDENTIALS
	rm -f $stub &>/dev/null
}
############################################################
get_interface_info() {

INETARR=($(ifconfig -a |sed -n '/^en[0-9].*flags/, /status/p' |awk   '$0 ~ /flags/ {l1=$1;l2="";l3=""} $0 ~ /ether/ {l2=$0} $0 ~ /inet / {l3=$2} $0 ~ /status/ {
        if ($0 ~ /status/ && $0 ~ /active/ && $0 !~ /inactive/) {
print l3
        }
}'))

INTARR=($(ifconfig -a |sed -n '/^en[0-9].*flags/, /status/p' |awk   '$0 ~ /flags/ {l1=$0;z=$1;gsub(":","",z);l2="";l3="";} $0 ~ /ether/ {l2=$0} $0 ~ /inet / {l3=$0} $0 ~ /status/ {
        if ($0 ~ /status:/ && length(z) > 0 && $0 ~ /active/  && $0 !~ /inactive/ &&  length(l3) > 0) {
                printf z
        }
}'))

if [ ${#INETARR[@]} == 0 ]; then
	writelog "No Active Interfaces found"
	exit 1
else
if [ ${#INTARR[@]} == 0 ]; then
	writelog "No Active Interfaces found"
	exit 1
fi
	if [ ${#INETARR[@]} == 1 ]; then
		for i in "${!INETARR[@]}"; do
			service=$(networksetup -listnetworkserviceorder | grep -w "${INTARR[$i]}" -B1 | grep -v -w "${INTARR[$i]}" | cut -d ')' -f2 | sed 's/^[ ]*//;s/[ ]*$//')
			#echo "# YOUR PRIMARY ACTIVE INTERFACE" >>$CREDENTIALS
			echo -e "INTERFACE=${INTARR[$i]}" >>$CREDENTIALS
#			echo "# YOUR PRIMARY ACTIVE NETWORK SERVICE" >>$CREDENTIALS
			echo -e "NWSERVICE='${service}'" >>$CREDENTIALS
			writelog "Using INTERFACE=${INTARR[$i]} IP=${INETARR[$i]} NWSERVICE='${service}'"
		done
	else
		writelog "Select Active Interface to use!"
		c=0
		while [ $c == 0 ]; do
			for i in "${!INETARR[@]}"; do
				writelog "[$i]: INTERFACE=${INTARR[$i]} IP=${INETARR[$i]}"
			done
			writelog "selection> " 1
			read i
			if [ "$i " -le ${#INETARR[@]} ]; then
					writelog "You chose $i"
					service=$(networksetup -listnetworkserviceorder | grep -w "${INTARR[$i]}" -B1 | grep -v -w "${INTARR[$i]}" | cut -d ')' -f2 | sed 's/^[ ]*//;s/[ ]*$//')
					writelog "Using INTERFACE=${INTARR[$i]} IP=${INETARR[$i]} NWSERVICE='${service}'"
					#echo "# YOUR PRIMARY ACTIVE INTERFACE" >>$CREDENTIALS
					echo -e "INTERFACE=${INTARR[$i]}" >>$CREDENTIALS
					#echo "# YOUR PRIMARY ACTIVE NETWORK SERVICE" >>$CREDENTIALS
					echo -e "NWSERVICE='${service}'" >>$CREDENTIALS
					c=1
					break 1
			else
					writelog "Invalid Answer"
			fi
		done
	fi

fi
}
############################################################
begin_setup() {
###################################################################
reset=
DNV=/etc/vpnc/tvpn-reset-dns-vpn
DNH=/etc/vpnc/tvpn-reset-dns-home
RESET_DNS=/etc/vpnc/tvpn-flush-dns
############################################################
RED='\033[0;31m'
NORMAL='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
BLUE='\033[0;94m'
MAGENTA='\033[0;35m'
LINE="================================================================"
THINLINE="-----------------------------------------------------------"
############################################################

if [ ! -z $reset_all ]; then
	build_creds
	reset_interface=1
	reset_user=1
	reset_password=1
	reset_domain=1
	reset_group=1
	reset_vpnserver=1
	reset_vpn_dns=1
	reset_local_dns=1
	reset_dns_script=1
fi
if [ ! -z $reset_interface ]; then
	clear_creds "INTERFACE"
	clear_creds "NWSERVICE"
	get_interface_info
fi

if [ ! -z $reset_user ]; then
	clear_creds "COM_USER"
	getuser
	writelog "$THINLINE"
fi

if [ ! -z $reset_password ]; then
	clear_creds "COM_PASSWD"
	getpass
	writelog "$THINLINE"

fi

if [ ! -z $reset_domain ]; then
	clear_creds "COM_DOMAIN"
	getdomain
	writelog "$THINLINE"
fi

if [ ! -z $reset_group ]; then
	clear_creds "COM_AUTHGROUP"
	getgroup
	writelog "$THINLINE"
fi

if [ ! -z $reset_vpnserver ]; then
	clear_creds "COM_HOST"
	getvpn
	writelog "$THINLINE"
fi
if [ ! -z $bd ]; then
		build_reset_file 1
		build_reset_file 2
		build_reset_dns
		exit
fi
if [ ! -z $reset_vpn_dns ]; then
	clear_creds "VPN_"
	getdns 1 1
	getdns 1 2
	build_reset_file 1
	writelog "$THINLINE"
fi

if [ ! -z $reset_local_dns ]; then
	clear_creds "LOCAL_"
	getdns 2 1
	getdns 2 2
	build_reset_file 2
	writelog "$THINLINE"
fi

if [ ! -f $RESET_DNS ] || [ ! -z $reset_dns_script ]; then
	build_reset_dns
fi
if [ ! -z $do_setup ]; then
	writelog "Setup Complete: Results:"
	writelog "$THINLINE"
fi
view_creds


}
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
# MAIN SECTION TO PARSE USER ARGUMENTS
###################################################################
###################################################################
###################################################################
###################################################################
###################################################################
if [ $# == 0 ]; then
        usage
fi

checklog
args=("$@")
arg_check=
opt=0
arg_check=0
for (( i = 0; i < ${#args[*]}; ++ i )); do
   arg=${args[$i]}
   next_arg=${args[$i+1]}
        case "$arg" in
                start)  start=1;;
                restart)   restart=1;;
                stop)   stop=1;;
                status) status=1;;
                setup) reset_all=1;do_setup=1;begin_setup;;
		"-b" ) bd=1;;
                "-s"|t|ta|tai|tail) vtail=1;;
                "-d")  debug=1;;
                "-r")
				case "$next_arg" in
					route)	reset_routing;rr=1;;
					all)	reset_all=1;do_reset=1;;
					user)	reset_user=1;do_reset=1;;
					"pass"|"password")  reset_password=1;do_reset=1;;
					"dom"|"domain")	reset_domain=1;do_reset=1;;
					"group"|"grp")		reset_group=1;do_reset=1;;
					"int"|"inter"|"interface")	reset_interface=1;do_reset=1;;
					"vpn"|"vpnserver")	reset_vpnserver=1;do_reset=1;;
					"vdns"|"vd"|"vdn")		reset_vpn_dns=1;do_reset=1;;
					"ldns"|"ld"|"local")	reset_local_dns=1;do_reset=1;;
					*)	usage;;
				esac
				arg_check=1
				;;
		"-R") reset_password=1;begin_setup;;
                "-p")  printall=1;;
                "test"|"-t") test=1; start=1;;
                "-v") echo "$SCRIPT v$VERSION";exit 0;;
                "-c") check_credentials;exit 0;;
                *)
			if [ $arg_check == 0 ]; then
				usage
			fi
			;;

        esac
done

if [ ! -z $do_reset ]; then
	begin_setup
	exit
fi
if [ ! -z $printall ]; then
	check_credentials 1
	exit 0
fi
if [ ! -z $start ] && [ ! -z $stop ]; then
  echo "ERROR: Cannot use 'start' and 'stop' you IdJut!"
  usage
fi

if [ ! -z $bd ]; then
	begin_setup
	exit
fi
if [ ! -z $status ]; then
  status_vpn
  exit
fi

if [ ! -z $start ]; then
  status_vpn
  if [ $is_running == 0 ]; then
	  start_vpn
  fi
  exit
fi

if [ ! -z $restart ]; then
	stop_vpn
	start_vpn
	exit
fi

if [ ! -z $stop ]; then
  stop_vpn
  exit
fi

if [ ! -z $vtail ]; then
  tail -f $LOGFILE
  exit
fi

if [ ! -z $rr ]; then
  writelog "Reset Routing ..."
fi
###################################################################
# END
###################################################################
